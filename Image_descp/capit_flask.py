# -*- coding: utf-8 -*-
"""CapIt_flask.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ck9K5DCX34PzhxRScmGvOLU3dwaVWSr5
"""

import numpy as np
import pandas as pd
import cv2
import matplotlib.pyplot as plt
import keras
import string
import json
from time import time 
import pickle
from keras.applications.vgg16 import VGG16
from keras.applications.resnet50 import ResNet50, preprocess_input, decode_predictions
from keras.models import Model,load_model
from keras.preprocessing import image
from keras.preprocessing.sequence import pad_sequences
#from keras.utils import to_categorical
from keras.layers import *
from keras.layers.merge import add

with open('word_to_idx.pkl','rb') as w2i:
    word_to_idx = pickle.load(w2i)
with open('idx_to_word.pkl','rb') as i2w:
    idx_to_word = pickle.load(i2w)

model = load_model('model_9.h5')

model_temp = ResNet50(weights='imagenet',input_shape=(224,224,3))
model_resnet = Model(model_temp.input,model_temp.layers[-2].output)

def preprocess_img(img):
    img = image.load_img(img,target_size=(224,224))
    img = image.img_to_array(img)
    img = np.expand_dims(img,axis=0)
    # Normalisation
    img = preprocess_input(img)
    return img

def encode_image(img):
    img = preprocess_img(img)
    feature_vector = model_resnet.predict(img)
    
    feature_vector = feature_vector.reshape((1, feature_vector.shape[1]))
    return feature_vector

"""# Predictions"""

def predict_caption(photo):
    in_text = "startseq"
    for i in range(35):
        sequence = [word_to_idx[w] for w in in_text.split() if w in word_to_idx]
        sequence = pad_sequences([sequence],maxlen=35,padding='post')

        ypred = model.predict([photo,sequence])
        ypred = ypred.argmax() #Word with max prob always - Greedy Sampling
        word = idx_to_word[ypred]
        in_text += " "+word

        if word == "endseq":
            break
    
    final_caption = in_text.split()[1:-1]
    final_caption = " ".join(final_caption)

    return final_caption

def caption_this_image(image):
    enc=encode_image(image)
    caption = predict_caption(enc)
    return caption

